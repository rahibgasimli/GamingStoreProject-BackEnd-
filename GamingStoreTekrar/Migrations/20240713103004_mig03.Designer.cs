// <auto-generated />
using System;
using GamingStoreTekrar.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GamingStoreTekrar.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240713103004_mig03")]
    partial class mig03
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.31")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GameGameTag", b =>
                {
                    b.Property<Guid>("GameTagsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GamesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameTagsId", "GamesId");

                    b.HasIndex("GamesId");

                    b.ToTable("GameGameTag");
                });

            modelBuilder.Entity("GameGenre", b =>
                {
                    b.Property<Guid>("GamesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenresId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GamesId", "GenresId");

                    b.HasIndex("GenresId");

                    b.ToTable("GameGenre");
                });

            modelBuilder.Entity("GamingStoreTekrar.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ShortDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4c28d261-9080-46cb-bcae-52eeded322fb"),
                            CreatedDate = new DateTime(2024, 7, 13, 14, 30, 2, 409, DateTimeKind.Local).AddTicks(4832),
                            Description = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Impedit minus corrupti voluptate repudiandae assumenda illo consequuntur, quaerat animi. Quisquam, praesentium.",
                            IsDeleted = false,
                            Name = "Call of Duty",
                            PhotoPath = "images/cta-bg.jpg",
                            Price = 60.0,
                            ShortDesc = "Lorem ipsum dolor sit amet consectetur adipisicing elit."
                        },
                        new
                        {
                            Id = new Guid("030376bf-fa43-4e5e-8579-f6a21e957f6e"),
                            CreatedDate = new DateTime(2024, 7, 13, 14, 30, 2, 409, DateTimeKind.Local).AddTicks(4846),
                            Description = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Voluptas aliquam aspernatur repellendus a, possimus vero at molestias voluptatibus maxime nisi!",
                            IsDeleted = false,
                            Name = "Assassin's Creed",
                            PhotoPath = "images/top-game-01.jpg",
                            Price = 50.0,
                            ShortDesc = "Lorem ipsum dolor sit amet consectetur adipisicing elit."
                        },
                        new
                        {
                            Id = new Guid("ebfd32eb-d512-4b79-8dd7-2f7849031f3f"),
                            CreatedDate = new DateTime(2024, 7, 13, 14, 30, 2, 409, DateTimeKind.Local).AddTicks(4849),
                            Description = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Cupiditate quibusdam eveniet voluptatum maiores expedita eos dolore itaque, doloremque ab quae.",
                            IsDeleted = false,
                            Name = "Halo Infinite",
                            PhotoPath = "images/top-game-02.jpg",
                            Price = 70.0,
                            ShortDesc = "Lorem ipsum dolor sit amet consectetur adipisicing elit."
                        },
                        new
                        {
                            Id = new Guid("9f5d890d-837a-4e7c-942c-3b996a3b7805"),
                            CreatedDate = new DateTime(2024, 7, 13, 14, 30, 2, 409, DateTimeKind.Local).AddTicks(4854),
                            Description = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Sint aliquid ab esse expedita veritatis eius quia repellendus, ipsam neque odit.",
                            IsDeleted = false,
                            Name = "The Witcher 3: Wild Hunt",
                            PhotoPath = "images/top-game-03.jpg",
                            Price = 40.0,
                            ShortDesc = "Lorem ipsum dolor sit amet consectetur adipisicing elit."
                        },
                        new
                        {
                            Id = new Guid("93ddba79-fd1f-413f-b368-3f36d1268183"),
                            CreatedDate = new DateTime(2024, 7, 13, 14, 30, 2, 409, DateTimeKind.Local).AddTicks(4870),
                            Description = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Eaque, quam exercitationem! Deserunt, obcaecati. Eaque minima tempora velit laudantium.",
                            IsDeleted = false,
                            Name = "Red Dead Redemption 2",
                            PhotoPath = "images/top-game-04.jpg",
                            Price = 55.0,
                            ShortDesc = "Lorem ipsum dolor sit amet consectetur adipisicing elit."
                        },
                        new
                        {
                            Id = new Guid("618e1aa0-4d54-477b-aff6-4a841dbd90c1"),
                            CreatedDate = new DateTime(2024, 7, 13, 14, 30, 2, 409, DateTimeKind.Local).AddTicks(4874),
                            Description = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Consequuntur quam deleniti doloribus recusandae sequi, laudantium doloremque quod sit omnis.",
                            IsDeleted = false,
                            Name = "FIFA 22",
                            PhotoPath = "images/top-game-05.jpg",
                            Price = 45.0,
                            ShortDesc = "Lorem ipsum dolor sit amet consectetur adipisicing elit."
                        },
                        new
                        {
                            Id = new Guid("c08b8037-936e-4223-8fbc-1bc58585862a"),
                            CreatedDate = new DateTime(2024, 7, 13, 14, 30, 2, 409, DateTimeKind.Local).AddTicks(4876),
                            Description = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Voluptatem iusto sit quae. Nesciunt, veniam dolorum! Ad, saepe. At, ipsum.",
                            IsDeleted = false,
                            Name = "Minecraft",
                            PhotoPath = "images/top-game-06.jpg",
                            Price = 30.0,
                            ShortDesc = "Lorem ipsum dolor sit amet consectetur adipisicing elit."
                        },
                        new
                        {
                            Id = new Guid("d60dcc9a-9ad1-43bf-920d-c02b6d42528a"),
                            CreatedDate = new DateTime(2024, 7, 13, 14, 30, 2, 409, DateTimeKind.Local).AddTicks(4879),
                            Description = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Autem quis iusto, blanditiis fugit dolorem odit nisi laborum sapiente eius!",
                            IsDeleted = false,
                            Name = "Cyberpunk 2077",
                            PhotoPath = "images/top-game-05.jpg",
                            Price = 50.0,
                            ShortDesc = "Lorem ipsum dolor sit amet consectetur adipisicing elit."
                        },
                        new
                        {
                            Id = new Guid("7fbba26c-9b97-4f70-9764-f1413c60cf80"),
                            CreatedDate = new DateTime(2024, 7, 13, 14, 30, 2, 409, DateTimeKind.Local).AddTicks(4881),
                            Description = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Fugiat quaerat molestiae laborum corporis, laudantium odit voluptate eligendi tempore vero!",
                            IsDeleted = false,
                            Name = "The Last of Us Part II",
                            PhotoPath = "images/top-game-03.jpg",
                            Price = 45.0,
                            ShortDesc = "Lorem ipsum dolor sit amet consectetur adipisicing elit."
                        },
                        new
                        {
                            Id = new Guid("06af56ea-ebbf-427b-aba0-ad7c24599c39"),
                            CreatedDate = new DateTime(2024, 7, 13, 14, 30, 2, 409, DateTimeKind.Local).AddTicks(4884),
                            Description = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Veniam nihil odio quos doloribus maiores, laborum minus, quibusdam distinctio consequatur!",
                            IsDeleted = false,
                            Name = "Grand Theft Auto V",
                            PhotoPath = "images/top-game-02.jpg",
                            Price = 40.0,
                            ShortDesc = "Lorem ipsum dolor sit amet consectetur adipisicing elit."
                        },
                        new
                        {
                            Id = new Guid("d0682606-78b3-4a62-8b8d-5276e523f891"),
                            CreatedDate = new DateTime(2024, 7, 13, 14, 30, 2, 409, DateTimeKind.Local).AddTicks(4886),
                            Description = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Adipisci voluptas exercitationem reiciendis iure eius dolorem excepturi molestias dolorum voluptatibus.",
                            IsDeleted = false,
                            Name = "Fortnite",
                            PhotoPath = "images/top-game-04.jpg",
                            Price = 0.0,
                            ShortDesc = "Lorem ipsum dolor sit amet consectetur adipisicing elit."
                        });
                });

            modelBuilder.Entity("GamingStoreTekrar.Entities.GameTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("GameTags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("34c39d68-3e69-4b79-9459-9e856da2aab0"),
                            CreatedDate = new DateTime(2024, 7, 13, 14, 30, 2, 409, DateTimeKind.Local).AddTicks(5051),
                            IsDeleted = false,
                            Name = "War"
                        },
                        new
                        {
                            Id = new Guid("c4b3b757-d166-476f-8f3a-e5d4976a9f00"),
                            CreatedDate = new DateTime(2024, 7, 13, 14, 30, 2, 409, DateTimeKind.Local).AddTicks(5054),
                            IsDeleted = false,
                            Name = "Crafting"
                        },
                        new
                        {
                            Id = new Guid("1e087a01-ad30-48c9-8015-9d3937da5f54"),
                            CreatedDate = new DateTime(2024, 7, 13, 14, 30, 2, 409, DateTimeKind.Local).AddTicks(5056),
                            IsDeleted = false,
                            Name = "Survival"
                        });
                });

            modelBuilder.Entity("GamingStoreTekrar.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("18697bed-e3ad-44dc-8f45-33b8381a2a7d"),
                            CreatedDate = new DateTime(2024, 7, 13, 14, 30, 2, 409, DateTimeKind.Local).AddTicks(5007),
                            IsDeleted = false,
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("237db43c-efa3-44c7-a407-76c5e8f04e48"),
                            CreatedDate = new DateTime(2024, 7, 13, 14, 30, 2, 409, DateTimeKind.Local).AddTicks(5017),
                            IsDeleted = false,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = new Guid("447ed388-7d85-4b11-b42b-25775378b857"),
                            CreatedDate = new DateTime(2024, 7, 13, 14, 30, 2, 409, DateTimeKind.Local).AddTicks(5019),
                            IsDeleted = false,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = new Guid("caeb4110-3752-4a75-b00b-507092a52c2c"),
                            CreatedDate = new DateTime(2024, 7, 13, 14, 30, 2, 409, DateTimeKind.Local).AddTicks(5021),
                            IsDeleted = false,
                            Name = "Simulation"
                        },
                        new
                        {
                            Id = new Guid("5c6fc38f-fe65-438b-949c-0a54af044b10"),
                            CreatedDate = new DateTime(2024, 7, 13, 14, 30, 2, 409, DateTimeKind.Local).AddTicks(5023),
                            IsDeleted = false,
                            Name = "Battle royale"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GameGameTag", b =>
                {
                    b.HasOne("GamingStoreTekrar.Entities.GameTag", null)
                        .WithMany()
                        .HasForeignKey("GameTagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamingStoreTekrar.Entities.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameGenre", b =>
                {
                    b.HasOne("GamingStoreTekrar.Entities.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamingStoreTekrar.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
