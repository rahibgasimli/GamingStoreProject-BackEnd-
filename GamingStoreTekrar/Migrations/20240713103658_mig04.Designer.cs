// <auto-generated />
using System;
using GamingStoreTekrar.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GamingStoreTekrar.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240713103658_mig04")]
    partial class mig04
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.31")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GameGameTag", b =>
                {
                    b.Property<Guid>("GameTagsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GamesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameTagsId", "GamesId");

                    b.HasIndex("GamesId");

                    b.ToTable("GameGameTag");
                });

            modelBuilder.Entity("GameGenre", b =>
                {
                    b.Property<Guid>("GamesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenresId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GamesId", "GenresId");

                    b.HasIndex("GenresId");

                    b.ToTable("GameGenre");
                });

            modelBuilder.Entity("GamingStoreTekrar.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<byte>("Age")
                        .HasColumnType("tinyint");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePhoto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("GamingStoreTekrar.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ShortDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ad80d084-69ac-4422-89bf-4eb180fdb448"),
                            CreatedDate = new DateTime(2024, 7, 13, 14, 36, 55, 790, DateTimeKind.Local).AddTicks(1636),
                            Description = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Impedit minus corrupti voluptate repudiandae assumenda illo consequuntur, quaerat animi. Quisquam, praesentium.",
                            IsDeleted = false,
                            Name = "Call of Duty",
                            PhotoPath = "images/cta-bg.jpg",
                            Price = 60.0,
                            ShortDesc = "Lorem ipsum dolor sit amet consectetur adipisicing elit."
                        },
                        new
                        {
                            Id = new Guid("4e15ff18-9e91-42ad-969e-71c0e888bf1a"),
                            CreatedDate = new DateTime(2024, 7, 13, 14, 36, 55, 790, DateTimeKind.Local).AddTicks(1687),
                            Description = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Voluptas aliquam aspernatur repellendus a, possimus vero at molestias voluptatibus maxime nisi!",
                            IsDeleted = false,
                            Name = "Assassin's Creed",
                            PhotoPath = "images/top-game-01.jpg",
                            Price = 50.0,
                            ShortDesc = "Lorem ipsum dolor sit amet consectetur adipisicing elit."
                        },
                        new
                        {
                            Id = new Guid("42e6812c-8744-4cf6-8391-ea388e0fdca3"),
                            CreatedDate = new DateTime(2024, 7, 13, 14, 36, 55, 790, DateTimeKind.Local).AddTicks(1691),
                            Description = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Cupiditate quibusdam eveniet voluptatum maiores expedita eos dolore itaque, doloremque ab quae.",
                            IsDeleted = false,
                            Name = "Halo Infinite",
                            PhotoPath = "images/top-game-02.jpg",
                            Price = 70.0,
                            ShortDesc = "Lorem ipsum dolor sit amet consectetur adipisicing elit."
                        },
                        new
                        {
                            Id = new Guid("59f4fadb-a264-4d94-a033-6b2734b3e038"),
                            CreatedDate = new DateTime(2024, 7, 13, 14, 36, 55, 790, DateTimeKind.Local).AddTicks(1695),
                            Description = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Sint aliquid ab esse expedita veritatis eius quia repellendus, ipsam neque odit.",
                            IsDeleted = false,
                            Name = "The Witcher 3: Wild Hunt",
                            PhotoPath = "images/top-game-03.jpg",
                            Price = 40.0,
                            ShortDesc = "Lorem ipsum dolor sit amet consectetur adipisicing elit."
                        },
                        new
                        {
                            Id = new Guid("85c4136d-af38-4be5-9504-eed922015e60"),
                            CreatedDate = new DateTime(2024, 7, 13, 14, 36, 55, 790, DateTimeKind.Local).AddTicks(1702),
                            Description = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Eaque, quam exercitationem! Deserunt, obcaecati. Eaque minima tempora velit laudantium.",
                            IsDeleted = false,
                            Name = "Red Dead Redemption 2",
                            PhotoPath = "images/top-game-04.jpg",
                            Price = 55.0,
                            ShortDesc = "Lorem ipsum dolor sit amet consectetur adipisicing elit."
                        },
                        new
                        {
                            Id = new Guid("af065e42-aea2-4a96-bdcd-ba31f879c608"),
                            CreatedDate = new DateTime(2024, 7, 13, 14, 36, 55, 790, DateTimeKind.Local).AddTicks(1715),
                            Description = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Consequuntur quam deleniti doloribus recusandae sequi, laudantium doloremque quod sit omnis.",
                            IsDeleted = false,
                            Name = "FIFA 22",
                            PhotoPath = "images/top-game-05.jpg",
                            Price = 45.0,
                            ShortDesc = "Lorem ipsum dolor sit amet consectetur adipisicing elit."
                        },
                        new
                        {
                            Id = new Guid("61821ed4-b660-4507-87ff-fc5b0f50aecc"),
                            CreatedDate = new DateTime(2024, 7, 13, 14, 36, 55, 790, DateTimeKind.Local).AddTicks(1718),
                            Description = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Voluptatem iusto sit quae. Nesciunt, veniam dolorum! Ad, saepe. At, ipsum.",
                            IsDeleted = false,
                            Name = "Minecraft",
                            PhotoPath = "images/top-game-06.jpg",
                            Price = 30.0,
                            ShortDesc = "Lorem ipsum dolor sit amet consectetur adipisicing elit."
                        },
                        new
                        {
                            Id = new Guid("e4d93132-4292-467f-9eb9-a9460c3650a1"),
                            CreatedDate = new DateTime(2024, 7, 13, 14, 36, 55, 790, DateTimeKind.Local).AddTicks(1724),
                            Description = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Autem quis iusto, blanditiis fugit dolorem odit nisi laborum sapiente eius!",
                            IsDeleted = false,
                            Name = "Cyberpunk 2077",
                            PhotoPath = "images/top-game-05.jpg",
                            Price = 50.0,
                            ShortDesc = "Lorem ipsum dolor sit amet consectetur adipisicing elit."
                        },
                        new
                        {
                            Id = new Guid("526d7f8e-d989-45a3-87aa-27806385abd0"),
                            CreatedDate = new DateTime(2024, 7, 13, 14, 36, 55, 790, DateTimeKind.Local).AddTicks(1732),
                            Description = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Fugiat quaerat molestiae laborum corporis, laudantium odit voluptate eligendi tempore vero!",
                            IsDeleted = false,
                            Name = "The Last of Us Part II",
                            PhotoPath = "images/top-game-03.jpg",
                            Price = 45.0,
                            ShortDesc = "Lorem ipsum dolor sit amet consectetur adipisicing elit."
                        },
                        new
                        {
                            Id = new Guid("205ec818-9135-42d4-80a8-3a98b5808279"),
                            CreatedDate = new DateTime(2024, 7, 13, 14, 36, 55, 790, DateTimeKind.Local).AddTicks(1745),
                            Description = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Veniam nihil odio quos doloribus maiores, laborum minus, quibusdam distinctio consequatur!",
                            IsDeleted = false,
                            Name = "Grand Theft Auto V",
                            PhotoPath = "images/top-game-02.jpg",
                            Price = 40.0,
                            ShortDesc = "Lorem ipsum dolor sit amet consectetur adipisicing elit."
                        },
                        new
                        {
                            Id = new Guid("5d3288ef-99c8-4741-8cc2-60d3423f9156"),
                            CreatedDate = new DateTime(2024, 7, 13, 14, 36, 55, 790, DateTimeKind.Local).AddTicks(1752),
                            Description = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Adipisci voluptas exercitationem reiciendis iure eius dolorem excepturi molestias dolorum voluptatibus.",
                            IsDeleted = false,
                            Name = "Fortnite",
                            PhotoPath = "images/top-game-04.jpg",
                            Price = 0.0,
                            ShortDesc = "Lorem ipsum dolor sit amet consectetur adipisicing elit."
                        });
                });

            modelBuilder.Entity("GamingStoreTekrar.Entities.GameTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("GameTags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("54c70052-1962-49b2-a365-94b19b99cd90"),
                            CreatedDate = new DateTime(2024, 7, 13, 14, 36, 55, 790, DateTimeKind.Local).AddTicks(1990),
                            IsDeleted = false,
                            Name = "War"
                        },
                        new
                        {
                            Id = new Guid("781cec06-de06-4a1a-bb55-477fe77f3a10"),
                            CreatedDate = new DateTime(2024, 7, 13, 14, 36, 55, 790, DateTimeKind.Local).AddTicks(2010),
                            IsDeleted = false,
                            Name = "Crafting"
                        },
                        new
                        {
                            Id = new Guid("9edbfd86-fe2d-48dd-8b71-c3047d853cb2"),
                            CreatedDate = new DateTime(2024, 7, 13, 14, 36, 55, 790, DateTimeKind.Local).AddTicks(2015),
                            IsDeleted = false,
                            Name = "Survival"
                        });
                });

            modelBuilder.Entity("GamingStoreTekrar.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fc110e2e-8277-40cc-8104-d6f76fbcae80"),
                            CreatedDate = new DateTime(2024, 7, 13, 14, 36, 55, 790, DateTimeKind.Local).AddTicks(1884),
                            IsDeleted = false,
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("d9015424-d1f3-47f8-a28a-686a0012641a"),
                            CreatedDate = new DateTime(2024, 7, 13, 14, 36, 55, 790, DateTimeKind.Local).AddTicks(1898),
                            IsDeleted = false,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = new Guid("e4edf488-73ff-4926-8880-5c8fe135dcec"),
                            CreatedDate = new DateTime(2024, 7, 13, 14, 36, 55, 790, DateTimeKind.Local).AddTicks(1901),
                            IsDeleted = false,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = new Guid("0311f88a-e3f7-42fb-b889-30f0ce6e022f"),
                            CreatedDate = new DateTime(2024, 7, 13, 14, 36, 55, 790, DateTimeKind.Local).AddTicks(1904),
                            IsDeleted = false,
                            Name = "Simulation"
                        },
                        new
                        {
                            Id = new Guid("942a41bb-c612-483d-b1fd-11326e6711ee"),
                            CreatedDate = new DateTime(2024, 7, 13, 14, 36, 55, 790, DateTimeKind.Local).AddTicks(1910),
                            IsDeleted = false,
                            Name = "Battle royale"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GameGameTag", b =>
                {
                    b.HasOne("GamingStoreTekrar.Entities.GameTag", null)
                        .WithMany()
                        .HasForeignKey("GameTagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamingStoreTekrar.Entities.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameGenre", b =>
                {
                    b.HasOne("GamingStoreTekrar.Entities.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamingStoreTekrar.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GamingStoreTekrar.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GamingStoreTekrar.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamingStoreTekrar.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GamingStoreTekrar.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
